# Azure DevOps CI/CD Pipeline for Azure Resources with Terraform and Ansible

name: Terraform Azure CI/CD Pipeline

trigger:
  branches:
    include:
      - main  # Trigger on pushes to the main branch

stages:
  - stage: Terraform
    jobs:
      - job: Terraform
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Checkout code from the repository
          - checkout: self

          # Install Terraform manually
          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update -y
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip
                unzip terraform_1.4.0_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version  # Verify the installation

          # Configure Azure credentials for Terraform
          - task: AzureCLI@2
            displayName: 'Login to Azure'
            inputs:
              azureSubscription: 'Azure for Students'  # Replace with your Azure DevOps service connection
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Logging into Azure"
                az account show

          # Initialize and apply Terraform to deploy Azure resources
          - task: Bash@3
            displayName: 'Initialize and Apply Terraform for Azure Resources'
            inputs:
              targetType: 'inline'
              script: |
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                
                terraform init
                terraform apply -auto-approve

          # Capture Terraform output (e.g., VM public IP) for Ansible
          - task: Bash@3
            displayName: 'Get Azure VM Public IP from Terraform Output'
            inputs:
              targetType: 'inline'
              script: |
                VM_PUBLIC_IP=$(terraform output -raw vm_public_ip)
                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$VM_PUBLIC_IP"

          # Install Ansible
          - task: Bash@3
            displayName: 'Install Ansible'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt update
                sudo apt install -y ansible

          # Run the Ansible playbook to install Docker and start the container on Azure VM
          - task: Bash@3
            displayName: 'Run Ansible Playbook'
            inputs:
              targetType: 'inline'
              script: |
                echo "[azure_vm]" > hosts.ini
                echo "$(VM_PUBLIC_IP)" >> hosts.ini
                echo "[azure_vm:vars]" >> hosts.ini
                echo "ansible_user=azureuser" >> hosts.ini  # Replace with your VM user if different
                echo "ansible_ssh_private_key_file=/path/to/your/private_key.pem" >> hosts.ini
                
                ansible-playbook -i hosts.ini setup-docker.yml

          # Wait for 6 minutes before destroying the infrastructure
          - task: Bash@3
            displayName: 'Wait for 6 minutes'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for 6 minutes before destroying the infrastructure..."
                sleep 360

          # Destroy infrastructure
          - task: Bash@3
            displayName: 'Destroy Infrastructure'
            inputs:
              targetType: 'inline'
              script: |
                terraform destroy -auto-approve
